// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: photos.proto

package photo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PicsClient is the client API for Pics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PicsClient interface {
	Pics(ctx context.Context, in *PicsReq, opts ...grpc.CallOption) (*PicsRes, error)
}

type picsClient struct {
	cc grpc.ClientConnInterface
}

func NewPicsClient(cc grpc.ClientConnInterface) PicsClient {
	return &picsClient{cc}
}

func (c *picsClient) Pics(ctx context.Context, in *PicsReq, opts ...grpc.CallOption) (*PicsRes, error) {
	out := new(PicsRes)
	err := c.cc.Invoke(ctx, "/photo.pics/pics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PicsServer is the server API for Pics service.
// All implementations must embed UnimplementedPicsServer
// for forward compatibility
type PicsServer interface {
	Pics(context.Context, *PicsReq) (*PicsRes, error)
	mustEmbedUnimplementedPicsServer()
}

// UnimplementedPicsServer must be embedded to have forward compatible implementations.
type UnimplementedPicsServer struct {
}

func (UnimplementedPicsServer) Pics(context.Context, *PicsReq) (*PicsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pics not implemented")
}
func (UnimplementedPicsServer) mustEmbedUnimplementedPicsServer() {}

// UnsafePicsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PicsServer will
// result in compilation errors.
type UnsafePicsServer interface {
	mustEmbedUnimplementedPicsServer()
}

func RegisterPicsServer(s grpc.ServiceRegistrar, srv PicsServer) {
	s.RegisterService(&Pics_ServiceDesc, srv)
}

func _Pics_Pics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PicsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicsServer).Pics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo.pics/pics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicsServer).Pics(ctx, req.(*PicsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pics_ServiceDesc is the grpc.ServiceDesc for Pics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo.pics",
	HandlerType: (*PicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "pics",
			Handler:    _Pics_Pics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photos.proto",
}
