// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/logx"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blogFieldNames          = builder.RawFieldNames(&Blog{})
	blogRows                = strings.Join(blogFieldNames, ",")
	blogRowsExpectAutoSet   = strings.Join(stringx.Remove(blogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	blogRowsWithPlaceHolder = strings.Join(stringx.Remove(blogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBlogIdPrefix          = "cache:blog:id:"
	cacheBlogPlatformPidPrefix = "cache:blog:platform:pid:"
)

type (
	blogModel interface {
		Insert(ctx context.Context, data *Blog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Blog, error)
		FindOneByPlatformPid(ctx context.Context, platform string, pid string) (*Blog, error)
		Update(ctx context.Context, data *Blog) error
		Delete(ctx context.Context, id uint64) error
		PageList(ctx context.Context, page int, pageSize int) ([]*Blog, error)
		Count(ctx context.Context) (int, error)
	}

	defaultBlogModel struct {
		sqlc.CachedConn
		table string
	}

	Blog struct {
		Id       uint64 `db:"id"`
		Platform string `db:"platform"`  // 来源
		ItemId   string `db:"item_id"`   // 组ID
		Text     string `db:"text"`      // 文案
		Pid      string `db:"pid"`       // 图片标识
		Src      string `db:"src"`       // 地址
		Index    int64  `db:"index"`     // 是否首页
		ShowType int64  `db:"show_type"` // 展示类型
		Deleted  int64  `db:"deleted"`   // 是否删除
		AddTime  string `db:"add_time"`  // 发布时间
		Width    int64  `db:"width"`     // 宽度
		Height   int64  `db:"height"`    // 高度
		Status   int64  `db:"status"`    // 状态
		Like     int64  `db:"like"`      // 点赞
		Dislike  int64  `db:"dislike"`   // 点踩
	}
)

func newBlogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBlogModel {
	return &defaultBlogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`blog`",
	}
}

func (m *defaultBlogModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	blogIdKey := fmt.Sprintf("%s%v", cacheBlogIdPrefix, id)
	blogPlatformPidKey := fmt.Sprintf("%s%v:%v", cacheBlogPlatformPidPrefix, data.Platform, data.Pid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, blogIdKey, blogPlatformPidKey)
	return err
}

func (m *defaultBlogModel) FindOne(ctx context.Context, id uint64) (*Blog, error) {
	blogIdKey := fmt.Sprintf("%s%v", cacheBlogIdPrefix, id)
	var resp Blog
	err := m.QueryRowCtx(ctx, &resp, blogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogModel) FindOneByPlatformPid(ctx context.Context, platform string, pid string) (*Blog, error) {
	blogPlatformPidKey := fmt.Sprintf("%s%v:%v", cacheBlogPlatformPidPrefix, platform, pid)
	var resp Blog
	err := m.QueryRowIndexCtx(ctx, &resp, blogPlatformPidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `platform` = ? and `pid` = ? limit 1", blogRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, platform, pid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlogModel) Insert(ctx context.Context, data *Blog) (sql.Result, error) {
	blogIdKey := fmt.Sprintf("%s%v", cacheBlogIdPrefix, data.Id)
	blogPlatformPidKey := fmt.Sprintf("%s%v:%v", cacheBlogPlatformPidPrefix, data.Platform, data.Pid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, blogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Platform, data.ItemId, data.Text, data.Pid, data.Src, data.Index, data.ShowType, data.Deleted, data.AddTime, data.Width, data.Height, data.Status, data.Like, data.Dislike)
	}, blogIdKey, blogPlatformPidKey)
	return ret, err
}

func (m *defaultBlogModel) Update(ctx context.Context, newData *Blog) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	blogIdKey := fmt.Sprintf("%s%v", cacheBlogIdPrefix, data.Id)
	blogPlatformPidKey := fmt.Sprintf("%s%v:%v", cacheBlogPlatformPidPrefix, data.Platform, data.Pid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, blogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Platform, newData.ItemId, newData.Text, newData.Pid, newData.Src, newData.Index, newData.ShowType, newData.Deleted, newData.AddTime, newData.Width, newData.Height, newData.Status, newData.Like, newData.Dislike, newData.Id)
	}, blogIdKey, blogPlatformPidKey)
	return err
}

func (m *defaultBlogModel) PageList(ctx context.Context, page int, limit int) ([]*Blog, error) {
	var resp []*Blog
	offset := (page - 1) * limit
	query := fmt.Sprintf("select %s from %s order by `id` desc limit %d, %d", blogRows, m.table, offset, limit)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	if err != nil {
		logx.Errorf("query: %s, err: %v", query, err)
		if err == sqlc.ErrNotFound {
			return nil, ErrNotFound
		}
		return nil, err
	}
	return resp, nil
}

// Count 获取数据总数
func (m *defaultBlogModel) Count(ctx context.Context) (int, error) {
	var resp int
	query := fmt.Sprintf("select count(*) from %s", m.table)
	err := m.QueryRowNoCacheCtx(ctx, &resp, query)
	if err != nil {
		return 0, err
	}
	return resp, nil
}

func (m *defaultBlogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBlogIdPrefix, primary)
}

func (m *defaultBlogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBlogModel) tableName() string {
	return m.table
}
